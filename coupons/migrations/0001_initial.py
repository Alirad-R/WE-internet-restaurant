# Generated by Django 5.2.1 on 2025-07-17 12:07

import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0003_remove_product_image_product_tags'),
    ]

    operations = [
        migrations.CreateModel(
            name='CouponNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('expiring_soon', 'Expiring Soon'), ('usage_limit', 'Usage Limit Reached'), ('new_coupon', 'New Coupon Available'), ('referral_used', 'Referral Coupon Used')], max_length=20)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CouponUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('used_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-used_at'],
            },
        ),
        migrations.CreateModel(
            name='CouponValidationHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempted_at', models.DateTimeField(auto_now_add=True)),
                ('validation_error', models.CharField(max_length=255)),
                ('order_value', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('cart_items', models.JSONField(null=True)),
            ],
            options={
                'ordering': ['-attempted_at'],
            },
        ),
        migrations.CreateModel(
            name='ReferralCoupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referral_bonus', models.DecimalField(decimal_places=2, help_text='Bonus amount/percentage for the referrer', max_digits=10)),
                ('max_referrals', models.PositiveIntegerField(default=10, help_text='Maximum number of referrals allowed')),
                ('current_referrals', models.PositiveIntegerField(default=0, help_text='Number of successful referrals')),
            ],
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique coupon code', max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of the coupon and its terms')),
                ('discount_type', models.CharField(choices=[('percentage', 'Percentage'), ('fixed', 'Fixed Amount'), ('buy_x_get_y', 'Buy X Get Y'), ('tiered', 'Tiered Discount')], default='percentage', max_length=20)),
                ('discount_value', models.DecimalField(decimal_places=2, help_text='Discount value (percentage or fixed amount)', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('valid_from', models.DateTimeField(default=django.utils.timezone.now, help_text='Start date of coupon validity')),
                ('valid_until', models.DateTimeField(blank=True, help_text='End date of coupon validity (optional)', null=True)),
                ('max_uses', models.PositiveIntegerField(blank=True, help_text='Maximum number of times this coupon can be used (optional)', null=True)),
                ('max_uses_per_user', models.PositiveIntegerField(default=1, help_text='Maximum number of times a single user can use this coupon')),
                ('current_uses', models.PositiveIntegerField(default=0, help_text='Number of times this coupon has been used')),
                ('min_order_value', models.DecimalField(decimal_places=2, default=0, help_text='Minimum order value required to use this coupon', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('min_order_items', models.PositiveIntegerField(default=1, help_text='Minimum number of items required in cart')),
                ('is_active', models.BooleanField(default=True)),
                ('is_one_time_use', models.BooleanField(default=False, help_text='If True, coupon can only be used once per user')),
                ('applies_to_discounted_items', models.BooleanField(default=False, help_text='If True, coupon can be applied to already discounted items')),
                ('buy_x_count', models.PositiveIntegerField(blank=True, help_text='Number of items to buy (for Buy X Get Y)', null=True)),
                ('get_y_count', models.PositiveIntegerField(blank=True, help_text='Number of items to get free (for Buy X Get Y)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer_tier', models.CharField(choices=[('all', 'All Customers'), ('new', 'New Customers'), ('regular', 'Regular Customers'), ('vip', 'VIP Customers')], default='all', help_text='Customer tier this coupon is applicable to', max_length=20)),
                ('min_customer_orders', models.PositiveIntegerField(blank=True, help_text='Minimum number of previous orders required', null=True)),
                ('max_customer_orders', models.PositiveIntegerField(blank=True, help_text='Maximum number of previous orders allowed', null=True)),
                ('min_customer_spent', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum amount customer must have spent historically', max_digits=10, null=True)),
                ('min_category_items', models.PositiveIntegerField(blank=True, help_text='Minimum number of items required from applicable categories', null=True)),
                ('combinable_with_discounts', models.BooleanField(default=False, help_text='Whether this coupon can be combined with other discounts')),
                ('combinable_with_coupons', models.BooleanField(default=False, help_text='Whether this coupon can be combined with other coupons')),
                ('usage_interval_days', models.PositiveIntegerField(blank=True, help_text='Minimum days required between uses by the same user', null=True)),
                ('time_restrictions', models.JSONField(blank=True, help_text='Time-based restrictions (e.g., specific days or hours)', null=True)),
                ('seasonal_restrictions', models.JSONField(blank=True, help_text='Seasonal restrictions (e.g., specific months or holidays)', null=True)),
                ('tiered_discounts', models.JSONField(blank=True, help_text='Tiered discount rules (e.g., spend more save more)', null=True)),
                ('applicable_categories', models.ManyToManyField(blank=True, help_text='Specific categories this coupon applies to (empty means all categories)', related_name='applicable_coupons', to='products.category')),
                ('applicable_products', models.ManyToManyField(blank=True, help_text='Specific products this coupon applies to (empty means all products)', related_name='applicable_coupons', to='products.product')),
                ('excluded_categories', models.ManyToManyField(blank=True, help_text='Categories that cannot be discounted with this coupon', related_name='excluded_coupons', to='products.category')),
                ('excluded_products', models.ManyToManyField(blank=True, help_text='Products that cannot be discounted with this coupon', related_name='excluded_coupons', to='products.product')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
